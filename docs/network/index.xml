<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络 on 个人笔记</title>
    <link>https://tech.lucumt.info/docs/network/</link>
    <description>Recent content in 网络 on 个人笔记</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://tech.lucumt.info/docs/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网络7层模型</title>
      <link>https://tech.lucumt.info/docs/network/what-is-osi-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/network/what-is-osi-model/</guid>
      <description>How is data sent over the network? Why do we need so many layers in the OSI model?&#xA;The diagram below shows how data is encapsulated and de-encapsulated when transmitting over the network.&#xA;🔹 Step 1: When Device A sends data to Device B over the network via the HTTP protocol, it is first added an HTTP header at the application layer.&#xA;🔹 Step 2: Then a TCP or a UDP header is added to the data.</description>
    </item>
    <item>
      <title>8种主要的网络协议</title>
      <link>https://tech.lucumt.info/docs/network/8-popular-network-protocols/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/network/8-popular-network-protocols/</guid>
      <description></description>
    </item>
    <item>
      <title>TCP状态变化图</title>
      <link>https://tech.lucumt.info/docs/network/tcp-status-change/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/network/tcp-status-change/</guid>
      <description></description>
    </item>
    <item>
      <title>HTTP状态码说明</title>
      <link>https://tech.lucumt.info/docs/network/http-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/network/http-status/</guid>
      <description></description>
    </item>
    <item>
      <title>网络协议依赖</title>
      <link>https://tech.lucumt.info/docs/network/network-protocol-dependencies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/network/network-protocol-dependencies/</guid>
      <description>Must-Know Network Protocol Dependencies&#xA;Understanding network protocol dependencies is essential for cybersecurity and networking. Here’s a quick understanding of the same:&#xA;IPv4 and IPv6 are the foundation of all networking. ICMP and ICMPv6 handle diagnostics, while IPsec ensures secure communication. TCP and UDP support various protocols. SCTP and DCCP serve specific cases. Some TCP-based protocols are HTTP, SSH, BGP, RDP, IMAP, SMTP, POP, etc. UDP-based protocols are DNS, DHCP, SIP, RTP, NTP, etc.</description>
    </item>
    <item>
      <title>浏览器如何处理网络请求</title>
      <link>https://tech.lucumt.info/docs/network/what-happens-when-type-url-in-browser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/network/what-happens-when-type-url-in-browser/</guid>
      <description>What happens when you type a URL into a browser?&#xA;Let’s look at the process step by step.&#xA;Step 1: The user enters a URL (bytebytego .com) into the browser and hits Enter. The first thing we need to do is to translate the URL to an IP address. The mapping is usually stored in a cache, so the browser looks for the IP address in multiple layers of cache: the browser cache, OS cache, local cache, and ISP cache.</description>
    </item>
    <item>
      <title>Nginx强大的原因</title>
      <link>https://tech.lucumt.info/docs/network/what-makes-nginx-so-useful/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/network/what-makes-nginx-so-useful/</guid>
      <description>&#xA;What Makes Nginx So Useful&#xA;Core Architecture: Master-worker process model handles connections efficiently High-Performance: Server Handles thousands of concurrent connections effortlessly Reverse Proxy: Distributes traffic across multiple backend servers Features: Built-in caching and SSL handling for speed and security </description>
    </item>
  </channel>
</rss>
