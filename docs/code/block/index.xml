<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代码块 on 个人笔记</title>
    <link>https://tech.lucumt.info/docs/code/block/</link>
    <description>Recent content in 代码块 on 个人笔记</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="https://tech.lucumt.info/docs/code/block/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL批量制造数据</title>
      <link>https://tech.lucumt.info/docs/code/block/mysql-batch-create-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/code/block/mysql-batch-create-data/</guid>
      <description>利用mysql的存储过程快速插入大量数据&#xA;1DELIMITER $$ 2 3USE `test`$$ 4 5DROP PROCEDURE IF EXISTS `add_user_batch`$$ 6 7CREATE DEFINER=`root`@`%` PROCEDURE `add_user_batch`(IN COUNT INT) 8BEGIN 9 DECLARE i INT; 10 DECLARE t_name VARCHAR(8); 11 DECLARE t_tag VARCHAR(20); 12 DECLARE t_age INT(2); 13 DECLARE t_sql_template VARCHAR(100); 14 DECLARE t_sql TEXT; 15 DECLARE t_tag_mod_val INT DEFAULT(25); 16 DECLARE t_commit_mod_val INT DEFAULT(100); 17 18 DECLARE t_start_time DATETIME; 19 DECLARE t_end_time DATETIME; 20 21 TRUNCATE TABLE `system_user`; 22 23 SET t_start_time=NOW(); 24 SET t_sql_template = &amp;#34;INSERT INTO `system_user`(NAME, age, tag) VALUES&amp;#34;; 25 SET t_sql = t_sql_template; 26 SET i = 1; 27 WHILE i &amp;lt;= COUNT 28 DO 29 SET t_age = FLOOR(1 + RAND() * 60); 30 SET t_name = LEFT(UUID(), 8); 31 -- 给tag随机制造空值 32 IF MOD(i, t_tag_mod_val) = 0 THEN 33 SET t_tag = &amp;#34;NULL&amp;#34;; 34 ELSE 35 SET t_tag = CONCAT(&amp;#34;&amp;#39;&amp;#34;,LEFT(UUID(), 8),&amp;#34;&amp;#39;&amp;#34;); 36 END IF; 37 38 SET t_sql = CONCAT(t_sql,&amp;#34;(&amp;#39;&amp;#34;,t_name,&amp;#34;&amp;#39;,&amp;#34;,t_age,&amp;#34;,&amp;#34;,t_tag,&amp;#34;)&amp;#34;); 39 40 IF MOD(i,t_commit_mod_val) !</description>
    </item>
    <item>
      <title>Matplotlib展示中文</title>
      <link>https://tech.lucumt.info/docs/code/block/matplotlib-show-chinese/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/code/block/matplotlib-show-chinese/</guid>
      <description>在Matplotlib中展示中文，防止乱码&#xA;核心代码：&#xA;1plt.rcParams[&amp;#39;font.sans-serif&amp;#39;]=[&amp;#39;SimHei&amp;#39;] #用来正常显示中文标签 2plt.rcParams[&amp;#39;axes.unicode_minus&amp;#39;] = False #用来正常显示负号 完整代码：&#xA;1import numpy as np 2import matplotlib.pyplot as plt 3from sklearn.linear_model import Lasso 4 5plt.rcParams[&amp;#39;font.sans-serif&amp;#39;]=[&amp;#39;SimHei&amp;#39;] #用来正常显示中文标签 6plt.rcParams[&amp;#39;axes.unicode_minus&amp;#39;] = False #用来正常显示负号 7 8# 生成模拟数据 9np.random.seed(42) 10disciple_count = np.random.randint(50, 200, size=20) 11establishment_years = np.random.randint(1, 100, size=20) 12weapon_types = np.random.randint(1, 10, size=20) 13master_skill = 2 * disciple_count + 1.5 * establishment_years + 3 * weapon_types + np.random.randn(20) * 20 + 100 14 15# 数据转换为二维数组 16X = np.</description>
    </item>
    <item>
      <title>通过脚本生成网站URL列表</title>
      <link>https://tech.lucumt.info/docs/code/block/python-generate-site-url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/code/block/python-generate-site-url/</guid>
      <description>Python脚本用于对网站的sitemap.xml文件进行解析&#xA;1from lxml import etree 2import requests, os 3 4if __name__ == &amp;#34;__main__&amp;#34;: 5 6 file_path = r&amp;#34;e:\urls.txt&amp;#34; 7 try: 8 os.remove(file_path) 9 except OSError: 10 pass 11 12 with open(file_path, &amp;#39;a&amp;#39;) as url_file: 13 xml_dict = {} 14 15 r = requests.get(&amp;#34;https://lucumt.info/sitemap.xml&amp;#34;) 16 root = etree.fromstring(r.content) 17 count = 0 18 for sitemap in root: 19 data = sitemap.getchildren()[0].text 20 if &amp;#39;tags&amp;#39; in data or &amp;#39;categories&amp;#39; in data: 21 continue 22 count = count + 1 23 url_file.</description>
    </item>
    <item>
      <title>Shell数组中模糊检测</title>
      <link>https://tech.lucumt.info/docs/code/block/shell-check-between-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/code/block/shell-check-between-arrays/</guid>
      <description>检测数组a中的元素是否模糊包含数组b中的一个或多个元素&#xA;1#!/bin/bash 2 3# 数组a和数组b的定义 4a=(&amp;#34;tainan&amp;#34; &amp;#34;taipei&amp;#34; &amp;#34;taichung&amp;#34; &amp;#34;keelung&amp;#34; &amp;#34;taoyuan&amp;#34; &amp;#34;changhua&amp;#34; &amp;#34;nantou&amp;#34; &amp;#34;kinmen&amp;#34;) 5b=(&amp;#34;tai&amp;#34; &amp;#34;nan&amp;#34;) 6 7 8for element_a in &amp;#34;${a[@]}&amp;#34;; do 9 contains=false 10 for pattern in &amp;#34;${b[@]}&amp;#34;; do 11 if [[ $element_a =~ $pattern ]]; then 12 contains=true 13 break 14 fi 15 done 16 if [ &amp;#34;$contains&amp;#34; = true ] ; then 17 echo &amp;#34;----------$element_a符合要求---------------&amp;#34; 18 else 19 echo &amp;#34;**********$element_a不符合要求************&amp;#34; 20 fi 21done 下述改进版的，可避免双重循环&#xA;1#!/bin/bash 2 3# 数组a和数组b的定义 4a=(&amp;#34;tainan&amp;#34; &amp;#34;taipei&amp;#34; &amp;#34;taichung&amp;#34; &amp;#34;keelung&amp;#34; &amp;#34;taoyuan&amp;#34; &amp;#34;changhua&amp;#34; &amp;#34;nantou&amp;#34; &amp;#34;kinmen&amp;#34;) 5b=(&amp;#34;tai&amp;#34; &amp;#34;nan&amp;#34;) 6 7# 将数组b中的元素连接成正则表达式 8regex=$(IFS=&amp;#39;|&amp;#39;; echo &amp;#34;${b[*]}&amp;#34;) 9 10for element_a in &amp;#34;${a[@]}&amp;#34;; do 11 if echo &amp;#34;$element_a&amp;#34; | egrep -iq &amp;#34;$regex&amp;#34;; then 12 echo &amp;#34;----------$element_a符合要求---------------&amp;#34; 13 else 14 echo &amp;#34;**********$element_a不符合要求************&amp;#34; 15 fi 16done </description>
    </item>
    <item>
      <title>Java中利用Lambda进行过滤</title>
      <link>https://tech.lucumt.info/docs/code/block/java-lambda-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/code/block/java-lambda-filter/</guid>
      <description>复杂的过滤 # 1import com.google.common.collect.Lists; 2import lombok.AllArgsConstructor; 3import lombok.Data; 4import org.apache.commons.lang3.StringUtils; 5 6import java.util.List; 7import java.util.stream.Collectors; 8 9public class FilterTest { 10 11 public static void testData() { 12 List&amp;lt;Record&amp;gt; recordsA = Lists.newArrayList( 13 new Record(&amp;#34;A&amp;#34;, &amp;#34;a1&amp;#34;), 14 new Record(&amp;#34;A&amp;#34;, &amp;#34;a2&amp;#34;), 15 new Record(&amp;#34;A&amp;#34;, &amp;#34;a4&amp;#34;), 16 new Record(&amp;#34;A&amp;#34;, &amp;#34;a5&amp;#34;), 17 new Record(&amp;#34;B&amp;#34;, &amp;#34;b1&amp;#34;), 18 new Record(&amp;#34;B&amp;#34;, &amp;#34;b2&amp;#34;), 19 new Record(&amp;#34;B&amp;#34;, &amp;#34;b7&amp;#34;), 20 new Record(&amp;#34;D&amp;#34;, &amp;#34;b7&amp;#34;) 21 ); 22 List&amp;lt;Record&amp;gt; recordsB = Lists.</description>
    </item>
    <item>
      <title>利用Go生成简易的Web Server</title>
      <link>https://tech.lucumt.info/docs/code/block/golang-web-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://tech.lucumt.info/docs/code/block/golang-web-server/</guid>
      <description>采用Golang生成Web Server无需额外处理相关的静态文件等引用，会减少代码量和维护工作量&#xA;1package main 2 3import ( 4&#x9;&amp;#34;encoding/json&amp;#34; 5&#x9;&amp;#34;io/ioutil&amp;#34; 6&#x9;&amp;#34;log&amp;#34; 7&#x9;&amp;#34;net/http&amp;#34; 8&#x9;&amp;#34;os&amp;#34; 9&#x9;&amp;#34;strconv&amp;#34; 10) 11 12type ConfigData struct { 13&#x9;Info string `json:&amp;#34;info&amp;#34;` 14&#x9;File string `json:&amp;#34;file&amp;#34;` 15&#x9;Port int `json:&amp;#34;port&amp;#34;` 16} 17 18func parseConfigFile() ConfigData { 19&#x9;jsonFile, err := os.Open(&amp;#34;config.json&amp;#34;) 20&#x9;if err != nil { 21&#x9;log.Println(err) 22&#x9;} 23&#x9;log.Println(&amp;#34;Successfully Opened config.json&amp;#34;) 24 25&#x9;defer jsonFile.Close() 26 27&#x9;byteValue, _ := ioutil.</description>
    </item>
  </channel>
</rss>
